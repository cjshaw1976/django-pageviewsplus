import re

from django.utils import six
from .models import HitCount
from django.db.models import F
from pageviewsplus import settings

class PageViewsPlusMiddleware(object):

    def process_response(self, request, response):

        # Do not count 500 error unexpected condition hits.
        if response.status_code == 500:
            return response

        # Do not count 301 moved permanently redirected urls.
        # We only want to count the final destination.
        # Also avoids counting 301 generated before 404 error when going from existent to nonexistent page.
        if response.status_code == 301:
            return response

        # Do not count 404 error pageviews.
        # This prevents pageview counts of nonexistent urls typically generated by bot activity.
        print response.status_code
        if response.status_code == 404:
            return response


        # Do not count hits in our IGNORED_URLS list
        elif settings.IGNORED_URLS and self.is_ignored_url(request):
            return response
        # Do not count hits in our HTTP_USER_AGENT list such as search engines.
        elif 'HTTP_USER_AGENT' in request.META and settings.IGNORED_USER_AGENTS and self.is_ignored_ua(request):
            return response

        else:
            hit, hit_created = HitCount.objects.get_or_create(url=request.path)
            hit.hits = F('hits') + 1
            hit.save()
            return response

    def is_ignored_url(self, request, url_pattern=''):

        # Although less readable the following list comprehension is probably faster than separate loop lines.
        #
        # The equivalent loops lines should read something like:
        ##
        ## for ignored_url in settings.IGNORED_URLS:
        ##    if request.META['PATH_INFO'].startswith(ignored_url)):
        ##        return True
        ##
        ## return False

        return any(request.META['PATH_INFO'].startswith(ignored_url)
            for ignored_url in settings.IGNORED_URLS)


    def is_ignored_ua(self, request, ua_pattern=''):

        return any(re.search(ua_pattern, request.META['HTTP_USER_AGENT']) 
                for ua_pattern in settings.IGNORED_USER_AGENTS)
